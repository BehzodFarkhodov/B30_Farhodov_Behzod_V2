1.LinkedList va ArrayList farqlari.ArrayList ma'lumotlarni saqlash
uchun arraydan foydalanadi.Arrayda load factor mavjud emas.Uning hajmi to'lganda
grow methodi yordamida uzunligini 1 ga oshirib yuboramiz.Arraydan qanday maqsadlarda foydalanish
mumkin: agar ma'lumotlar ustida ko'proq (read) o'qish amalini ishlatmoqchi bo'lsak arraydan
foydalangan ma'qul.ArrayList da elementlarni manipulyatsiya qilish sekin dedik  Sababi u arraydan foydalanadi. Agar array dan element o'chirilsa undan keyingi elemetnlar bitta oldinga surulishi kerak. Agar index bo'yicha element joylaydigan bo'lsak ,
shu index dan keyingi elementlarni bitta keyinga surish kerak.ArrayList classi List interface dan implements olgan.
Shu sababdan u faqat list/ro'yhat sifatida ishlatilish mumkun.ArrayList ob'ekti yaratilganda boshlang'ich hajmi 10 ga teng bo'ladi odatiy holatda.
Ya'nikim ArrayList dagi array ning uzunligi 10 ga teng bo'ladi. ArrayList -
ob'ekti yaratayotganda konstructor orqali boshlang'ich hajmni o'zgartirishimiz mumkun



LinkedList - LinkedList interfeys.Ma'lumotlarni saqlash uchun DoublyLinkedListdan foydalanadi.
Nodelardan ya'ni.Dynamic o'zgaruvchi.LinkedListdan koproq elementlar ustida manipulyatsiya
qilish uchun ishlatish qulay.Ya'ni elementlarni olish,listga elementlarni qo'shish,o'chirish(remove)
kabi amallarini bajarish qulay.LinkedList classi List va Queue ,Deque interface laridan implementatsiya qilgan.
Shu sababdan u list/ro'yhat va navbat sifatida ishlarilishi mumkun.LinkedList da boshlang'ich hajm bo'lmaydi. LinkedList dan ob'ekt
yaratganimizda ichkaridagi double linked list ning elementlar soni 0ga teng bo'ladi deymz.



2.LinkedHashMap ma'lumotlarni qanday saqlaydi - LinkedHashMap ma'lumotlarni Hashhashtable strukturasiga asoslangan holda elementlarni saqlaydi.
Ya'ni Elementlarni saqlash uchun Array va LinkedList kombinatsialaridan foydalanadi. Map lardagi kabi
saqlaydi.Node tipli arrayda saqlaydi.Elementlarni key va valuesi mavjud.Keyni hashkodini
arrayni uzunligiga qoldiqli bo'lib,shu qoldiqdagi indexga elementni joylashtirib ketadi.
LinkedHashMap klassining HashMap klassidan farqi u elementlarni qo'shish tartibini saqlab qoladi. Ya'ni LinkedHashMap da elementlar qo'shish tartibi bo'ladi.
Qolgan ishlash prinsiplarining barchasi  HashMap classi bilan birxil hisoblaymiz.
Dublikatlar (o'xshash) key kalitlar mumkin emas.
Dublikatlar (o'xshash) value lar istalgancha qo'shish mumkin.
Ya'ni Elementlarni saqlash uchun Array va LinkedListlardan  foydalanadi.
Cloneable, Serializable interface lardan implementatsiya olgan.


3.Generickdan foydalanish nega kerak.
Generics - Generics  parametrlashtirilgan tiplarni bildiradi. (Generics mean parameterized types)
Ya'ni qaysidir class yoki metodni qandaydir mavhum tipga bog'lab qo'yamiz va shu class yoki metod ni
ishlatayotganda bizga kerakli bo'lgan tipni berib yuboramiz.
Natijada shu tip uchun  shu class yoki metodni ishlatamiz.Bu orqali type safetyga erishishimiz mumkin.


4.Collection Heirarcy -            Itarable
                                       |
                                   Collection

        List                       Queue                            Set

        ArrayList                  Deque                            HashSet

        LinkedList                 PriorityQueue                    LinkedHashSet

        Stack                      ArrayDequeue                     TreeSet

        DoublyLinkedList                                            SortedSet

        Iterable interfeysdan Collection interfeys implemantatsiya oladi.Collectiondan List,Queue,
        va Set interfeyslari extend oladi.